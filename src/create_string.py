from .string_factory import StringFactory
from .string_model import StringPayload
from .config import DB_INSTANCE_POOL



##################################################################################
#    Asynchronously creates and saves a string payload.                          #
#                                                                                #
#    This function takes a `StringPayload` object, uses it to create an instance #
#    of `StringFactory`, generates a response payload, and returns the stored    #
#    payload as a dictionary.                                                    #
#                                                                                #       
#    Args:                                                                       #
#        payload (StringPayload): The input payload containing the string value. #
#                                                                                #
#    Returns:                                                                    #
#   dict: The stored response payload generated by the `StringFactory` instance. #
##################################################################################
async def create_and_save_string(payload: StringPayload) -> dict:
    string_factory_instance = StringFactory(payload.value)
    stored_payload = string_factory_instance.create_response_payload()
    return stored_payload


#################################################################################
# Retrieves a payload from the database by its string value.                    #
# The string value is hashed using SHA-256 to locate the corresponding payload. #
# Args:                                                                         #
#     string_value (str): The string value to search for in the database.       #
# Returns:                                                                      #
#     dict | None: The found payload as a dictionary, or None if not found.     #
#################################################################################
async def get_payload_by_id(string_value: str) -> dict | None:                  
    string_factory_instance = StringFactory(string_value)                               
    generated_hash = string_factory_instance.sha256_hash()                      
    found_payload = await DB_INSTANCE_POOL.retrieve_from_db(generated_hash)     
    return found_payload                                                        



###########################################################################################
# Retrieves payloads from the database that match specific query parameters.              #
# Filters include palindrome status, length range, word count, and character containment. #
# Args:                                                                                   #  
#     is_palindrome (bool): Whether the string is a palindrome.                           #
#     min_length (int): The minimum length of the string.                                 #
#     max_length (int): The maximum length of the string.                                 #
#     word_count (int): The exact word count of the string.                               #
#     contains_character (str): A character that must be present in the string.           #
# Returns:                                                                                #
#     list: A list of matching payloads as dictionaries.                                  #  
###########################################################################################
async def get_by_query(converted_payload_dict):
    matching_payload = []
    ret_db = await DB_INSTANCE_POOL.get_all_db_content()

    # Iterate over the dictionaries (values) in the database result
    for doc in ret_db.values():
        value = doc.get('value', '')
        properties = doc.get('properties', {})

        # Safely retrieve filter values with defaults
        is_palindrome = properties.get('is_palindrome')
        length = properties.get('length', 0)
        word_count = properties.get('word_count', 0)
        contains_character = converted_payload_dict.get('contains_character', '')

        # Apply filters
        filters = [
            is_palindrome == converted_payload_dict.get('is_palindrome'),
            length >= converted_payload_dict.get('min_length', 0),
            length <= converted_payload_dict.get('max_length', float('inf')),
            word_count == converted_payload_dict.get('word_count', word_count),
            contains_character in value if contains_character else True
        ]

        # Check if all filters pass
        if all(filters):
            matching_payload.append(doc)

    return matching_payload

###########################################################################################
# Deletes a payload from the database by its string value.                                #
# The string value is hashed using SHA-256 to locate and delete the corresponding payload.#
# Args:                                                                                   #      
#     string_value (str): The string value to delete from the database.                   #
# Returns:                                                                                #          
#     bool: True if the payload was successfully deleted, False otherwise.                #  
###########################################################################################           
async def delete_payload_by_id(string_value: str) -> bool:
    string_factory_instance = StringFactory(string_value)
    generated_hash = string_factory_instance.sha256_hash()
    payload_state = await DB_INSTANCE_POOL.delete_from_db(generated_hash)
    return payload_state